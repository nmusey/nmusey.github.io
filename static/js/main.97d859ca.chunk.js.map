{"version":3,"sources":["components/navbar/navbar.jsx","components/double-column/double-column.jsx","components/landing/landing.jsx","components/section/section.jsx","components/project/project.jsx","components/project-container/project-container.jsx","components/list/list.jsx","components/homepage/profile.jpeg","components/homepage/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","collapseWidth","state","collapsed","bigWindow","window","innerWidth","this","setState","setWindowState","addEventListener","title","titleLink","children","className","type","onClick","collapseNav","href","map","name","url","id","dispatchEvent","CustomEvent","React","Component","DoubleColumn","Landing","subtitle","picture","altText","src","alt","Section","yPosition","hasAnimated","willAnimate","previousScroll","animationHeightBuffer","animationheightbuffer","node","ReactDOM","findDOMNode","getBoundingClientRect","y","windowTop","Math","round","scrollY","windowBottom","innerHeight","component","ref","viewRef","Project","description","ProjectContainer","isFetching","projects","username","maxRepos","fetch","then","res","json","repos","forEach","repo","push","catch","err","console","error","fetchRepos","length","proj","List","array","item","indexOf","Homepage","sections","jsx","navbarLinks","section","toLowerCase","ProfileImage","App","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.97d859ca.chunk.js","sourcesContent":["import React from 'react';\n\nimport './navbar.styles.scss';\n\n/** Navbar Component\n * \n * @param title title for the left side of the navbar\n * @param titleLink what the title links to\n * @param children JSX elements with name, id, and url attributes\n * @param collapseWidth Optional, defines when the navbar should be a column instead of a row\n */\nclass Navbar extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n\n        /* collapseWidth will be the width the navbar \n            goes into a column */\n        this.collapseWidth = props.collapseWidth || 600; \n\n        this.state = { \n            collapsed: true, \n            bigWindow: (window.innerWidth >= this.collapseWidth)\n        }\n    }\n\n\n    /**\n     * Negates the state so the navbar collapses.\n     */\n    collapseNav() {\n        this.setState({ collapsed: !this.state.collapsed })\n    }\n\n\n\n\n    /**\n     * Utility function to set bigWindow in state\n     */\n    setWindowState() {\n        this.setState({ \n            bigWindow: (window.innerWidth >= this.collapseWidth),\n         });\n    }\n\n    /** \n     * Sets window state and adds an event listener to watch for window resizes\n     */\n    componentDidMount() {\n        this.setWindowState();\n        window.addEventListener('resize', \n            () => this.setWindowState()\n        );\n    }\n\n    /**\n     * Conditionally renders the right side of the nav\n     * This is toggled using the hamburger button\n     */\n    render() {\n        const { title, titleLink, children } = this.props;\n\n        return (\n            <nav>\n                <div className=\"nav-left\">\n                    {/* Always render the hamburger button */}\n                    <button\n                        type=\"switch\" \n                        className=\"nav-button interactive\"\n                        onClick={()=>this.collapseNav()}\n                    >â‰¡ </button>\n\n                    {/* Always render the title */}\n                    <a href={titleLink}> <h2>{title}</h2> </a>\n                </div> \n\n                {/* Conditionally render right of navbar */}\n                <div \n                    className={ `nav-drawer ${\n                        (!this.state.collapsed && this.state.bigWindow)\n                        ? \"nav-drawer-vis\" : \"nav-drawer-invis\"}`\n                }>\n                    { !this.state.collapsed && children.map( ({name, url, id}) => (\n                        <a  \n                            href={url} \n                            key={id}\n                            onClick={()=>window.dispatchEvent(new CustomEvent('navScroll'))}\n                        >\n                        <h3 className=\"nav-item interactive \">{name}</h3>\n                        </a>\n                    ))}\n                </div> \n            </nav>\n        )\n    }\n\n}\n\nexport default Navbar","import React from 'react';\n\nimport './double-column.scss';\n\n\n/**\n * DoubleColumn\n * \n * Displays 2 children in side by side columns.\n * The first child will be on the left and vice versa.\n * Collapses to one column for smaller screens.\n * \n * @param children 2 JSX elements to be displayed\n */\nconst DoubleColumn = ({ children }) => (    \n    <div className=\"double-column\">\n        <div className=\"left-double-column\">\n            { children[0] }\n        </div>\n        <div className=\"right-double-column\">\n            { children[1] }\n        </div>\n    </div>\n\n)\n\n\nexport default DoubleColumn;","import React from 'react';\n\nimport DoubleColumn from '../double-column/double-column';\n\nimport './landing.styles.scss';\n\n\n/** Landing component\n * \n * @param title title of the landing section\n * @param subtitle subtitle of the landing section\n * @param picture Picture to be displayed\n * @param altText Alternate text to the picture\n */\nconst Landing = ({ title, subtitle, picture, altText }) => {\n    \n    return (\n        <div className=\"landing-bg\">\n            <DoubleColumn>\n                <img \n                    src={picture}\n                    alt={altText}\n                    className=\"profilePicture\"\n                />\n                <div id=\"landing-text\">\n                    <h1>{title}</h1>\n                    <h3>{subtitle}</h3>\n                </div>\n            </DoubleColumn>\n        </div>\n    )\n}\n\n\n\n\nexport default Landing;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './section.styles.scss';\n\n/**\n * \n * @param title Title of the section\n * @param id id for navigation to the section\n * @param component component to render - can be more than\n * @param animationheightbuffer Height in pixels before the component animates to visible, defaults to 200px.\n */\nclass Section extends React.Component {\n\n\n    constructor(props) {\n        super()\n\n        this.state = {\n            yPosition: 0,\n            hasAnimated: false,\n            willAnimate: false,\n            previousScroll: 0,\n            animationHeightBuffer: props.animationheightbuffer || 200\n        }\n    \n    }\n\n        \n\n    /* Add a listener to watch for user scrolling in order to animate at the correct time. */\n    componentDidMount() {\n        const node = ReactDOM.findDOMNode(this)\n        this.setState({ yPosition: node.getBoundingClientRect().y });\n\n        // scroll is the native event, navScroll is fired from the Navbar.\n        window.addEventListener('scroll', () => {\n            const windowTop = Math.round(window.scrollY) - this.state.animationHeightBuffer ;\n            const windowBottom = windowTop + window.innerHeight;\n            const inView = this.state.yPosition < windowBottom && this.state.yPosition > windowTop;\n\n            // Decide animation state based on window and component position\n            const willAnimate = inView && !this.state.hasAnimated;\n            const hasAnimated = this.state.hasAnimated || willAnimate;\n\n            this.setState({ willAnimate, hasAnimated });\n        });\n\n        window.addEventListener('navScroll', () => this.setState({ willAnimate: true }));\n    }\n\n\n    /* Only update state as the user moves down the page since this is all that changes state.\n        Once the component has animated, stop updating since it doesn't change anything.\n    */\n    shouldComponentUpdate() {\n        return (this.state.hasAnimated \n                    && \n                (window.scrollY > this.state.previousScroll + 50)) \n                \n                || \n                this.state.willAnimate\n            ;\n    }\n\n    /* Track whether user scrolled down to save unnecessary udpating */\n    componentDidUpdate() {\n        this.setState({ previousScroll: window.scrollY });\n        if (this.state.willAnimate) {\n            this.setState({ willAnimate: false });\n        }\n    }\n\n\n\n    render() {\n        const {title, id, component} = this.props;\n        let {willAnimate, hasAnimated} = this.state;\n\n        return (\n            <section id={id} ref={this.viewRef} \n                className={`scroll-animate ${(willAnimate || hasAnimated) ? \"scroll-animate-active\" : \"\"}`}\n            >\n                <a href={\"#\" + id} name={id}>\n                    <h2 \n                        className=\"section-title\"\n                        id={id + \"-title\"}\n                    >{title}</h2>\n                </a>\n                { component }\n            </section>\n        )\n    }\n}\n\n\n\n\nexport default Section;","import React from 'react';\n\nimport './project.styles.scss';\n\n\nconst Project = ({name, description, url}) => (\n\n    <div className=\"project interactive\">\n        <a href={url} className=\"project-link\">\n            <h3 className=\"project-title\">{name}</h3>\n            { description ?  (<p className=\"project-description\">{description}</p>) : null }\n        </a>\n    </div>\n\n)\n\nexport default Project;","import React from 'react';\n\nimport Project from '../project/project';\n\nimport './project-container.styles.scss';\n\n\n/**\n * Container for automatically imported projects.\n * Pass in a Github username as a prop and they'll be rendered\n * Optionally pass in maxRepos as a prop to only fetch that many repos.\n */\nclass ProjectContainer extends React.Component {\n\n    /* Props should include a Github username and optionally a maximum number of repos to load. */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: true,\n            projects: []\n        }\n        this.username = props.username; // Stored in the class so fetchRepos can access it\n\n        props.maxRepos ? this.maxRepos=props.maxRepos : this.maxRepos=6;\n    }\n\n\n    /* Fetches Github repos using username stored in the class */\n    fetchRepos() {\n        let projects = [];\n        fetch(`https://api.github.com/users/${this.props.username}/repos?per_page=${this.maxRepos}`)\n            .then( res => res.json() )\n            .then( repos => {\n                repos.forEach( \n                    repo => {\n                        const { name, description, id } = repo;\n                        const url = `https://www.github.com/${this.username}/${name}`; // create the url for the project\n                        projects.push( { name, description, url, id} );\n                });\n                this.setState({ isFetching: false });\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({ projects: { name: \"Error fetching projects\", id: 0, url: \"\"} })\n        })\n\n        this.setState({ isFetching: false });\n\n        return projects;\n    }\n\n\n    /* Starts fetching upon mount  */\n    componentDidMount() {\n        this.setState( { projects: this.fetchRepos() } )\n    }\n\n\n\n    /* Renders a project for each imported repo. */\n    render() {\n        if (this.state.isFetching) {\n            return (\n                <div className=\"project-container\">\n                    <h1>Projects are loading...</h1>\n                </div>\n            )\n        } else if ( !this.state.projects.length ) {\n            return (\n                <div className=\"project-container\">\n                    <h1>No projects were found :(</h1>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"project-container\">\n                    { this.state.projects.map( proj => (<Project name={proj.name} \n                                                                description={proj.description} \n                                                                key={proj.id} \n                                                                url={proj.url} />) \n                                            ) }\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default ProjectContainer;","import React from 'react';\n\nimport './list.styles.scss'\n\n/**\n * \n * Expects a title and an array of strings\n */\nconst List = ({ title, array }) => (\n    <div className=\"list\">\n        <span className=\"list-title\"><h3>{title}</h3></span>\n        <ul>\n            { array.map( item => { return (<li key={array.indexOf(item)}>{item}</li>) } ) }\n        </ul>\n    </div>\n)\n\nexport default List;","export default __webpack_public_path__ + \"static/media/profile.fea3bd2b.jpeg\";","import React from 'react';\n\nimport Navbar from '../navbar/navbar';\nimport Landing from '../landing/landing';\nimport Section from '../section/section';\nimport DoubleColumn from '../double-column/double-column';\nimport ProjectContainer from '../project-container/project-container';\nimport List from '../list/list';\n\nimport ProfileImage from './profile.jpeg';\nimport './homepage.styles.scss';\n\n\n\n\n\n/**\n * Homepage\n * \n * Renders a homepage. Not intended to be incredibly reusable,\n *  just meant to tie together some other reusable components.\n */\nconst Homepage = () => {\n\n    // These are rendered by  a component later\n    const skillsArray = [\n        'Front-End Development using React',\n        'RESTful API Development using Express.js and Node.js',\n        'Python',\n        'PostgreSQL'\n    ]\n\n    // These are rendered by a component later\n    const learningNowArray = [\n        'Machine learning theory & practice',\n    ]\n\n\n    const sections = [{\n        name: \"Projects\",\n        jsx: (<ProjectContainer id=\"project-container\" username=\"nmusey\" />)\n    }, {\n        name: \"Skills\",\n        jsx: (\n            <DoubleColumn>\n                <List title=\"My Skills\" array={skillsArray} />\n                <List title=\"What I'm Learning Now\" array={learningNowArray} />\n            </DoubleColumn>)\n    }, {\n        name: \"Contact\",\n        jsx: ( <p>Feel free to contact me through email at nmusey@gmail.com with any questions or comments you might have.</p> )\n    }]\n\n\n    const navbarLinks = sections.map( section => ({\n        name: section.name,\n        url: \"#\" + section.name.toLowerCase(),\n        id: sections.indexOf(section)\n    }) )\n\n    return(\n        <main className=\"homepage\">\n            <Navbar \n                title=\"Nick Musey\"\n                titleLink=\"#landing\"\n            >\n                {navbarLinks}\n            </Navbar>\n\n            <section id=\"landing-section\">\n                <Landing \n                    className=\"landing\"\n                    title=\"Hi, I'm Nick\"\n                    subtitle=\"I'm a 4th year Computer Science and Psychology student at the University of Victoria.\"\n                    picture={ProfileImage}\n                    alt=\"Picture of Nick\"\n                />\n            </section>\n\n            <div className=\"personal-information\">\n            {\n                sections.map( section => (\n                    <Section \n                        title={section.name}\n                        key={sections.indexOf(section)}\n                        id={section.name.toLowerCase()}\n                        animationheightbuffer={200}\n                        component={section.jsx}\n                    />\n                ) )\n            }\n            </div>\n\n        </main>\n    )\n}\n\n\n\nexport default Homepage;","import React from 'react';\nimport './App.css';\n\nimport Homepage from './components/homepage/homepage';\n\nfunction App() {\n  return (\n    <Homepage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}