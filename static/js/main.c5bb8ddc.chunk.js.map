{"version":3,"sources":["components/homepage/profile.jpeg","components/navbar/navbar.jsx","components/double-column/double-column.jsx","components/landing/landing.jsx","components/section/section.jsx","components/project/project.jsx","components/project-container/project-container.jsx","components/list/list.jsx","components/homepage/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","collapseWidth","state","collapsed","bigWindow","window","innerWidth","this","setState","setWindowState","addEventListener","title","titleLink","children","console","log","className","type","onClick","collapseNav","href","map","name","url","id","key","React","Component","DoubleColumn","Landing","subtitle","picture","altText","src","alt","Section","component","Project","description","ProjectContainer","isFetching","projects","username","maxRepos","fetch","then","res","json","repos","forEach","repo","push","catch","err","error","fetchRepos","length","proj","List","array","item","indexOf","Homepage","ProfileImage","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c5bb8ddc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.0ebfeef5.jpeg\";","import React from 'react';\n\nimport './navbar.styles.scss';\n\n/** Navbar Component\n * \n * @param title title for the left side of the navbar\n * @param titleLink what the title links to\n * @param children JSX elements with name, id, and url attributes\n * @param collapseWidth Optional, defines when the navbar should be a column instead of a row\n */\nclass Navbar extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n\n        /* collapseWidth will be the width the navbar \n            goes into a column */\n        this.collapseWidth = props.collapseWidth || 600; \n\n        this.state = { \n            collapsed: true, \n            bigWindow: (window.innerWidth >= this.collapseWidth)\n        }\n    }\n\n\n    /**\n     * Negates the state so the navbar collapses.\n     */\n    collapseNav() {\n        this.setState({ collapsed: !this.state.collapsed })\n    }\n\n\n    /**\n     * Utility function to set bigWindow in state\n     */\n    setWindowState() {\n        this.setState({ \n            bigWindow: (window.innerWidth >= this.collapseWidth),\n         });\n    }\n\n    /** \n     * Sets window state and adds an event listener to watch for window resizes\n     */\n    componentDidMount() {\n        this.setWindowState();\n        window.addEventListener('resize', \n            () => this.setWindowState()\n        );\n    }\n\n    /**\n     * Conditionally renders the right side of the nav\n     * This is toggled using the hamburger button\n     */\n    render() {\n        const { title, titleLink, children } = this.props;\n        \n        console.log(this.state);\n\n        return (\n            <nav>\n                <div className=\"nav-left\">\n                    {/* Conditionally render hamburger symbol */}\n                    <button\n                        type=\"radio\" \n                        className=\"nav-button\"\n                        onClick={()=>this.collapseNav()}\n                    >â‰¡ </button>\n\n                    {/* Always render the title */}\n                    <a href={titleLink}><h2>{title}</h2></a>\n                </div> \n\n                {/* Conditionally render right of navbar */}\n                <div \n                    className={ \"nav-drawer \" + (\n                        (this.state.collapsed || !this.state.bigWindow)\n                        ? \n                        \"nav-drawer-invis\" \n                        :\n                        \"nav-drawer-vis\"\n                )}>\n                    { !this.state.collapsed && children.map( ({name, url, id}) => (\n                        <a  href={url} key={id}>\n                            <h3 className=\"nav-item\">{name}</h3>\n                        </a>\n                    ))}\n                </div> \n            </nav>\n        )\n    }\n\n}\n\nexport default Navbar","import React from 'react';\n\nimport './double-column.scss';\n\n\n/**\n * DoubleColumn\n * \n * Displays 2 children in side by side columns.\n * The first child will be on the left and vice versa.\n * Collapses to one column for smaller screens.\n * \n * @param children 2 JSX elements to be displayed\n */\nconst DoubleColumn = ({ children }) => (    \n    <div className=\"double-column\">\n        <div className=\"left-double-column\">\n            { children[0] }\n        </div>\n        <div className=\"right-double-column\">\n            { children[1] }\n        </div>\n    </div>\n\n)\n\n\nexport default DoubleColumn;","import React from 'react';\n\nimport DoubleColumn from '../double-column/double-column';\n\nimport './landing.styles.scss';\n\n\n/** Landing component\n * \n * @param title title of the landing section\n * @param subtitle subtitle of the landing section\n * @param picture Picture to be displayed\n * @param altText Alternate text to the picture\n */\nconst Landing = ({ title, subtitle, picture, altText }) => {\n    \n    return (\n        <div className=\"landing-bg\">\n            <DoubleColumn>\n                <img \n                    src={picture}\n                    alt={altText}\n                    className=\"profilePicture\"\n                />\n                <div id=\"landing-text\">\n                    <h1>{title}</h1>\n                    <h3>{subtitle}</h3>\n                </div>\n            </DoubleColumn>\n        </div>\n    )\n}\n\n\n\n\nexport default Landing;","import React from 'react';\n\n/**\n * \n * @param title Title of the section\n * @param id id for navigation to the section\n * @param component component to render - can be more than\n */\nconst Section = ({title, id, component}) => (\n    <section id=\"id\">\n        <a href={\"#\" + id} name={id}>\n            <h2 \n                className=\"section-title\"\n                id={id + \"-title\"}\n            >{title}</h2>\n        </a>\n        { component }\n    </section>\n)\n\n\nexport default Section;","import React from 'react';\n\nimport './project.styles.scss';\n\n\nconst Project = ({name, description, url}) => (\n\n    <div className=\"project\">\n        <a href={url} className=\"project-link\">\n            <h3 className=\"project-title\">{name}</h3>\n            { description ?  (<p className=\"project-description\">{description}</p>) : null }\n        </a>\n    </div>\n\n)\n\nexport default Project;","import React from 'react';\n\nimport Project from '../project/project';\n\nimport './project-container.styles.scss';\n\nclass ProjectContainer extends React.Component {\n\n\n    /**\n     * \n     * Props should include a Github username and optionally a maximum number of repos to load.\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: true,\n            projects: []\n        }\n        this.username = props.username; // Stored in the class so fetchRepos can access it\n\n        props.maxRepos ? this.maxRepos=props.maxRepos : this.maxRepos=6;\n    }\n\n\n    /**\n     * Fetches Github repos using username given \n     */\n    fetchRepos() {\n        let projects = [];\n        fetch(`https://api.github.com/users/${this.props.username}/repos?per_page=${this.maxRepos}`)\n            .then( res => res.json() )\n            .then( repos => {\n                repos.forEach( \n                    repo => {\n                        const { name, description, id } = repo;\n                        const url = `https://www.github.com/${this.username}/${name}`; // create the url for the project\n                        projects.push( { name, description, url, id} );\n                });\n                this.setState({ isFetching: false });\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({ projects: { name: \"Error fetching projects\", id: 0, url: \"\"} })\n        })\n\n        return projects;\n    }\n\n\n    \n    componentDidMount() {\n        this.setState( { projects: this.fetchRepos() } )\n    }\n\n\n\n    render() {\n        if (this.state.isFetching) {\n            return (\n                <div className=\"project-container\">\n                    <h1>Projects are loading...</h1>\n                </div>\n            )\n        } else if ( !this.state.projects.length ) {\n            return (\n                <div className=\"project-container\">\n                    <h1>No projects were found :(</h1>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"project-container\">\n                    { this.state.projects.map( proj => (<Project name={proj.name} \n                                                                description={proj.description} \n                                                                key={proj.id} \n                                                                url={proj.url} />) \n                                            ) }\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default ProjectContainer;","import React from 'react';\n\nimport './list.styles.scss'\n\n/**\n * \n * Expects a title and an array of strings\n */\nconst List = ({ title, array }) => (\n    <div className=\"list\">\n        <span className=\"list-title\"><h3>{title}</h3></span>\n        <ul>\n            { array.map( item => { return (<li key={array.indexOf(item)}>{item}</li>) } ) }\n        </ul>\n    </div>\n)\n\nexport default List;","import React from 'react';\n\nimport Navbar from '../navbar/navbar';\nimport Landing from '../landing/landing';\nimport Section from '../section/section';\nimport DoubleColumn from '../double-column/double-column';\nimport ProjectContainer from '../project-container/project-container';\nimport List from '../list/list';\n\nimport ProfileImage from './profile.jpeg';\nimport './homepage.styles.scss';\n\n\n\nconst Homepage = () => {\n\n    // Links declared here with title, url, and id.\n    const navbarLinks = [\n        {\n            name: \"Projects\",\n            url: \"#projects\",\n            id: 1\n        }, {\n            name: \"Skills\",\n            url: \"#skills\",\n            id: 2\n        }\n    ]\n\n    // These are rendered by  a component later\n    const skills = [\n        'Front-End Development using React',\n        'RESTful API Development using Express.js and Node.js',\n        'Python',\n        'PostgreSQL and MongoDB experience',\n        'Object Oriented Programming'\n    ]\n\n    // These are rendered by a component later\n    const learningNow = [\n        'React Hooks', 'Django', 'Artificial Intelligence',\n        'Database Design'\n    ]\n\n\n\n    return (\n        <main className=\"homepage\">\n            <Navbar \n                title=\"Nick Musey\"\n                titleLink=\"#landing\"\n            >\n                {navbarLinks}\n            </Navbar>\n\n            <section id=\"landing-section\">\n                <Landing \n                    title=\"Hi, I'm Nick\"\n                    subtitle=\"I'm a 4th year Computer Science and Psychology student the the University of Victoria\"\n                    picture={ProfileImage}\n                    alt=\"Picture of Nick\"\n                />\n            </section>\n\n            <Section title=\"Projects\" id=\"projects\"\n                component={(<ProjectContainer id=\"project-container\" username=\"nmusey\" />)}\n            />\n\n            <Section title=\"Skills\" id=\"skills\"\n                component={(\n                    <DoubleColumn>\n                        <List title=\"My Skills\" array={skills} />\n                        <List title=\"What I'm Learning Now\" array={learningNow} />\n                    </DoubleColumn>)}\n            />            \n\n\n\n            <Section title=\"Contact\" id=\"contact\"\n                component={(\n                    <p>Feel free to contact me through email at nmusey@gmail.com with any questions or comments you might have.</p>\n                )}\n            />\n\n        </main>\n    )\n}\n\n\n\nexport default Homepage;","import React from 'react';\nimport './App.css';\n\nimport Homepage from './components/homepage/homepage';\n\nfunction App() {\n  return (\n    <Homepage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}