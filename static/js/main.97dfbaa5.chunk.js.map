{"version":3,"sources":["components/landing/profile.jpeg","components/navbar/navbar.jsx","components/double-column/double-column.jsx","components/landing/landing.jsx","components/project/project.jsx","components/project-container/project-container.jsx","components/fancy-list/fancy-list.jsx","pages/homepage/homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","title","children","href","className","map","name","url","id","key","DoubleColumn","Landing","subtitle","src","ProfileImage","alt","Project","description","ProjectContainer","props","state","isFetching","projects","username","maxRepos","fetch","this","then","res","json","repos","forEach","repo","push","setState","catch","err","console","error","fetchRepos","length","proj","React","Component","FancyList","array","item","indexOf","Homepage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.97dfbaa5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.478c5a4e.jpeg\";","import React from 'react';\n\nimport './navbar.styles.scss';\n\n/** Navbar Component\n * \n * @param title title for the left side of the navbar\n * @param children JSX elements with name, id, and url attributes\n * \n */\nconst Navbar = ({title, children}) => (\n    <nav>\n        <a href=\"#landing\">\n            <div className=\"nav-left\">\n                <h2>{title}</h2>\n            </div>\n        </a>\n        <div className=\"nav-right\">\n            { children.map( ({name, url, id}) => (\n            <a className=\"navbar-item\" href={url} key={id}>\n                <h3>{name}</h3>\n            </a>\n            ))}\n        </div>     \n    </nav>\n)\n\nexport default Navbar","import React from 'react';\n\nimport './double-column.scss';\n\n\n/**\n * DoubleColumn\n * \n * Displays 2 children in side by side columns.\n * The first child will be on the left and vice versa.\n * \n * @param children 2 JSX elements to be displayed\n */\nconst DoubleColumn = ({ children }) => (    \n    <div className=\"double-column\">\n        <div className=\"left-double-column\">\n            { children[0] }\n        </div>\n        <div className=\"right-double-column\">\n            { children[1] }\n        </div>\n    </div>\n\n)\n\n\nexport default DoubleColumn;","import React from 'react';\n\nimport DoubleColumn from '../double-column/double-column';\n\nimport ProfileImage from './profile.jpeg';\nimport './landing.styles.scss';\n\n\n/** Landing component\n * \n * @param ProfileImage imported picture \n * @param title title of the landing section\n * @param subtitle subtitle of the landing section\n */\nconst Landing = ({ title, subtitle }) => {\n    \n    return (\n        <div className=\"landing-bg\">\n            <DoubleColumn>\n                <img \n                    src={ProfileImage}\n                    alt=\"Profile of Nick\"\n                    className=\"profilePicture\"\n                />\n                <div id=\"landing-text\">\n                    <h1>{title}</h1>\n                    <h2>{subtitle}</h2>\n                </div>\n            </DoubleColumn>\n        </div>\n    )\n}\n\n\n\n\nexport default Landing;","import React from 'react';\n\nimport './project.styles.scss';\n\n\nconst Project = ({name, description, url}) => (\n\n    <div className=\"project\">\n        <a href={url} className=\"project-link\">\n            <h3 className=\"project-title\">{name}</h3>\n            { description ?  (<p className=\"project-description\">{description}</p>) : null }\n        </a>\n    </div>\n\n)\n\nexport default Project;","import React from 'react';\n\nimport Project from '../project/project';\n\nimport './project-container.styles.scss';\n\nclass ProjectContainer extends React.Component {\n\n\n    /**\n     * \n     * Props should include a Github username and optionally a maximum number of repos to load.\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isFetching: true,\n            projects: []\n        }\n        this.username = props.username; // Stored in the class so fetchRepos can access it\n\n        props.maxRepos ? this.maxRepos=props.maxRepos : this.maxRepos=6;\n    }\n\n\n    /**\n     * Fetches Github repos using username given \n     */\n    fetchRepos() {\n        let projects = [];\n        fetch(`https://api.github.com/users/${this.props.username}/repos?per_page=${this.maxRepos}`)\n            .then( res => res.json() )\n            .then( repos => {\n                repos.forEach( \n                    repo => {\n                        const { name, description, id } = repo;\n                        const url = `https://www.github.com/${this.username}/${name}`; // create the url for the project\n                        projects.push( { name, description, url, id} );\n                });\n                this.setState({ isFetching: false });\n            })\n            .catch(err => {\n                console.error(err);\n                this.setState({ projects: { name: \"Error fetching projects\", id: 0, url: \"\"} })\n        })\n\n        return projects;\n    }\n\n\n    \n    componentDidMount() {\n        this.setState( { projects: this.fetchRepos() } )\n    }\n\n\n\n    render() {\n        if (this.state.isFetching) {\n            return (\n                <div className=\"project-container\">\n                    <h1>Projects are loading...</h1>\n                </div>\n            )\n        } else if ( !this.state.projects.length ) {\n            return (\n                <div className=\"project-container\">\n                    <h1>No projects were found :(</h1>\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"project-container\">\n                    { this.state.projects.map( proj => (<Project name={proj.name} \n                                                                description={proj.description} \n                                                                key={proj.id} \n                                                                url={proj.url} />) \n                                            ) }\n                </div>\n            )\n        }\n\n    }\n}\n\nexport default ProjectContainer;","import React from 'react';\n\nimport './fancy-list.styles.scss'\n\n/**\n * \n * Expects a title and an array of strings\n */\nconst FancyList = ({ title, array }) => (\n    <div className=\"fancy-list\">\n        <h1>{title}</h1>\n        <ul>\n            { array.map( item => { return (<li key={array.indexOf(item)}>{item}</li>) } ) }\n        </ul>\n    </div>\n)\n\nexport default FancyList;","import React from 'react';\n\nimport Navbar from '../../components/navbar/navbar';\nimport Landing from '../../components/landing/landing';\nimport DoubleColumn from '../../components/double-column/double-column';\nimport ProjectContainer from '../../components/project-container/project-container';\nimport FancyList from '../../components/fancy-list/fancy-list';\n\nimport './homepage.styles.scss';\n\n\n\nconst Homepage = () => {\n\n    // Links declared here with title, url, and id.\n    const navbarLinks = [\n        {\n            name: \"Projects\",\n            url: \"#projects\",\n            id: 1\n        }, {\n            name: \"Skills\",\n            url: \"#skills\",\n            id: 2\n        }\n    ]\n\n    const skills = [\n        'Front-End Development using React',\n        'Back-End Development using Express.js and Node.js',\n        'Python for automation',\n        'PostgreSQL and MongoDB experience',\n    ]\n\n    const learningNow = [\n        'React Hooks', 'Django', 'Artificial Intelligence',\n        'Database Design'\n    ]\n\n    return (\n        <div className=\"homepage\">\n            <Navbar title=\"Nick Musey\">\n                {navbarLinks}\n            </Navbar>\n            <Landing \n                title=\"Nick Musey\"\n                subtitle=\"Student & Developer\"\n            />\n            <a name=\"projects\" href=\"#projects\"><h1>Projects</h1></a>\n            <ProjectContainer id=\"project-container\" username=\"nmusey\"/>\n\n            <a name=\"skills\" href=\"#skills\"><h1>Skills</h1></a>\n            <DoubleColumn>\n                <FancyList title=\"Skills\" array={skills} />\n                <FancyList title=\"Learning Now\" array={learningNow} />\n            </DoubleColumn>\n        </div>\n    )\n}\n\n\n\nexport default Homepage;","import React from 'react';\nimport './App.css';\n\nimport Homepage from './pages/homepage/homepage';\n\nfunction App() {\n  return (\n    <Homepage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}